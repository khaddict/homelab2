version: 1.0
description: Create a new Proxmox VM.

input:
  - vmid
  - vm_name
  - disk
  - memory
  - cores
  - description
  - template
  - ip_addr
  - vm_role
  - node
  - force
  - tags

vars:
  - domain: "homelab.lan"
  - vm_fqdn: "<% ctx().vm_name %>.<% ctx().domain %>"
  - saltmaster: "saltmaster.<% ctx().domain %>"
  - pdns: "pdns.<% ctx().domain %>"
  - recursor: "recursor.<% ctx().domain %>"
  - proxmox: "<% ctx().node %>.<% ctx().domain %>"
  - template_id: ""
  - storage: "local-lvm"
  - st2_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMe90Wiw4mR6NRi6lQ1qBmDHHzweeMSeksqUd38GpR2e stackstorm.homelab.lan"
  - saltmaster_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ3swvmrdQSe+f3QsuNdBtMl8WIQePhU2KDLiy9RozWU saltmaster.homelab.lan"
  - a_zone_name: "<% ctx().domain %>."
  - ptr_zone_name: "0.168.192.in-addr.arpa."
  - msg: ""

tasks:
  start:
    action: core.echo message="Automation started."
    next:
      - when: <% succeeded() and ctx().force = false %>
        do: get_approval
      - when: <% succeeded() and ctx().force = true %>
        do: check_vm_existence

  get_approval:
    action: core.ask
    input:
      schema:
        type: object
        properties:
          approved:
            type: boolean
            description: "You must update the network configuration and proxmox data files before starting the workflow. Continue ?"
            required: True
    next:
      - when: <% succeeded() %>
        do: check_vm_existence

  check_vm_existence:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm list | grep -w "<% ctx().vm_name %>" > /dev/null; echo $?
    next:
      - when: <% succeeded() and result()[ctx().proxmox].stdout = 0 %>
        do: noop
        publish:
          - msg: "VM <% ctx().vm_name %> already exists."
      - when: <% succeeded() and result()[ctx().proxmox].stdout = 1 %>
        do: get_template_id

  get_template_id:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm list | grep <% ctx().template %> | awk '{print $1}'
    next:
      - when: <% succeeded() %>
        do: clone_vm
        publish:
          - template_id: <% result()[ctx().proxmox].stdout %>
      - when: <% failed() %>
        publish:
          - msg: "Could not retrieve the template ID."

  clone_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm clone <% ctx().template_id %> <% ctx().vmid %> --full --name <% ctx().vm_name %> --storage <% ctx().storage %> --target <% ctx().node %>
    next:
      - when: <% succeeded() %>
        do: configure_vm
      - when: <% failed() %>
        publish:
          - msg: "Could not clone the VM."

  configure_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm set <% ctx().vmid %> --tags <% ctx().tags %> --ciuser root -ipconfig0 ip=<% ctx().ip_addr %>/24,gw={{ gateway }} --memory <% ctx().memory %> --cores <% ctx().cores %> --serial0 socket --sshkeys <(echo -e "<% ctx().st2_sshkey %>\n<% ctx().saltmaster_sshkey %>")
    next:
      - when: <% succeeded() %>
        do: resize_disk
      - when: <% failed() %>
        publish:
          - msg: "Could not configure the VM."

  resize_disk:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm disk resize <% ctx().vmid %> scsi0 "+<% int(ctx().disk) - 2 %>G"
    next:
      - when: <% succeeded() %>
        do: start_vm
      - when: <% failed() %>
        publish:
          - msg: "Could not resize the disk."

  start_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      timeout: 90
      cmd: |
        qm start <% ctx().vmid %>
        echo wait 10s; sleep 10; echo waiting for host ping response; fping --quiet --retry=60 --backoff=1 --timeout=1000 <% ctx().ip_addr %> && echo wait 15s for ssh service to start && sleep 15
    next:
      - when: <% succeeded() %>
        do: resize_part
      - when: <% failed() %>
        publish:
          - msg: "Could not start the VM."

  resize_part:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      timeout: 90
      cmd: |
        apt install parted -y
        echo -e "Yes\nquit" | parted /dev/sda resizepart 1 100% ---pretend-input-tty
        resize2fs /dev/sda1
    next:
      - when: <% succeeded() %>
        do: set_hostname
      - when: <% failed() %>
        publish:
          - msg: "Could not resize the partition."

  set_hostname:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        hostnamectl set-hostname "<% ctx().vm_fqdn %>"
    next:
      - when: <% succeeded() %>
        do: install_salt_minion
      - when: <% failed() %>
        publish:
          - msg: "The hostname could not be set."

  install_salt_minion:
    action: core.remote
    input:
      hosts: <% ctx().saltmaster %>
      username: root
      timeout: 120
      cmd: |
        salt-ssh --user=root -i --priv=/root/.ssh/id_ed25519 <% ctx().ip_addr %> state.sls independent
    next:
      - when: <% succeeded() %>
        do: ssh_keygen
      - when: <% failed() %>
        publish:
          - msg: "Could not install & configure salt-minion."

  ssh_keygen:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        systemctl restart salt-minion
        sleep 20
        ssh-keygen -t ed25519 -C "<% ctx().vm_fqdn %>" -f /root/.ssh/id_ed25519 -q -N ""
    next:
      - when: <% succeeded() %>
        do: accept_salt_key
      - when: <% failed() %>
        publish:
          - msg: "Could not generate the SSH public key."

  accept_salt_key:
    action: core.remote
    input:
      hosts: <% ctx().saltmaster %>
      username: root
      cmd: |
        salt-key -a <% ctx().vm_fqdn %> -y
    next:
      - when: <% succeeded() %>
        do: highstate_vm
      - when: <% failed() %>
        publish:
          - msg: "Could not accept the salt-key for <% ctx().vm_fqdn %>."

  highstate_vm:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        salt-call state.highstate
    next:
      - when: <% succeeded() %>
        do: reboot_vm
      - when: <% failed() %>
        publish:
          - msg: "Could not highstate <% ctx().vm_fqdn %>."

  reboot_vm:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        reboot now
    next:
      - when: <% succeeded() or failed() %>
        do: create_a_record

  create_a_record:
    action: powerdns.create_records
    input:
      rrset_changetype: "REPLACE"
      rrset_name: "<% ctx().vm_name %>"
      rrset_ttl: 60
      rrset_rtype: A
      rrset_records:
        - <% ctx().ip_addr %>
      zone_name: "<% ctx().a_zone_name %>"
    next:
      - when: <% succeeded() %>
        do: create_ptr_record
      - when: <% failed() %>
        publish:
          - msg: "Could not create the A record for <% ctx().vm_fqdn %>."

  create_ptr_record:
    action: powerdns.create_records
    input:
      rrset_changetype: "REPLACE"
      rrset_name: "<% ctx().ip_addr.split('.')[3] %>"
      rrset_ttl: 60
      rrset_rtype: PTR
      rrset_records:
        - "<% ctx().vm_fqdn %>."
      zone_name: "<% ctx().ptr_zone_name %>"
    next:
      - when: <% succeeded() %>
        do: restart_recursor_service
      - when: <% failed() %>
        publish:
          - msg: "Could not create the PTR record for <% ctx().vm_fqdn %>."

  restart_recursor_service:
    action: core.remote
    input:
      hosts: <% ctx().recursor %>
      username: root
      cmd: |
        systemctl restart pdns-recursor.service
    next:
      - when: <% succeeded() %>
        do: create_vm_netbox
      - when: <% failed() %>
        publish:
          - msg: "Could not restart pdns-recurstor.service."

  create_vm_netbox:
    action: st2_homelab.netbox_vm
    input:
      vm_name: "<% ctx().vm_name %>"
      vm_role: <% ctx().vm_role %>
      ip_addr: "<% ctx().ip_addr %>/24"
      vcpus: <% ctx().cores %>
      memory: <% ctx().memory %>
      disk: <% int(ctx().disk) * 1000 %>
    next:
      - when: <% succeeded() %>
        publish:
          - msg: "Everything is finished."
      - when: <% failed() %>
        publish:
          - msg: "Could not create <% ctx().vm_fqdn %> on NetBox side."

output:
  - msg: <% ctx().msg %>
